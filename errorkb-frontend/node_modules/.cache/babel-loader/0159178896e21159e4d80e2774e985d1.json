{"ast":null,"code":"var _jsxFileName = \"D:\\\\Github\\\\Diplomarbeit\\\\errorkb-frontend\\\\src\\\\components\\\\UploadScreen.jsx\";\nimport React, { Component } from 'react';\nimport '../App.css';\n/*\r\nScreen:LoginScreen\r\nLoginscreen is the main screen which the user is shown on first visit to page and after\r\nhitting logout\r\n*/\n\nimport LoginScreen from './auth/loginscreen';\n/*\r\nModule:Material-UI\r\nMaterial-UI is used for designing ui of the app\r\n*/\n\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\nimport AppBar from 'material-ui/AppBar';\nimport RaisedButton from 'material-ui/RaisedButton';\nimport Drawer from 'material-ui/Drawer';\nimport MenuItem from 'material-ui/MenuItem';\nimport FontIcon from 'material-ui/FontIcon';\nimport { blue500, red500, greenA200 } from 'material-ui/styles/colors';\nvar apiBaseUrl = \"http://localhost:4000/api/\";\n/*\r\nModule:Dropzone\r\nDropzone is used for local file selection\r\n*/\n\n/*\r\nModule:superagent\r\nsuperagent is used to handle post/get requests to server\r\n*/\n\nvar request = require('superagent');\n\nclass UploadScreen extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      role: 'student',\n      filesPreview: [],\n      filesToBeSent: [],\n      draweropen: false,\n      printcount: 10,\n      printingmessage: '',\n      printButtonDisabled: false\n    };\n  }\n\n  componentWillMount() {\n    // console.log(\"prop values\",this.props.role);\n    var printcount; //set upload limit based on user role\n\n    if (this.props.role) {\n      if (this.props.role == 'student') {\n        printcount = 5;\n      } else if (this.props.role == 'teacher') {\n        printcount = 10;\n      }\n    }\n\n    this.setState({\n      printcount,\n      role: this.props.role\n    });\n  }\n  /*\r\n  Function:handleCloseClick\r\n  Parameters: event,index\r\n  Usage:This fxn is used to remove file from filesPreview div\r\n  if user clicks close icon adjacent to selected file\r\n  */\n\n\n  handleCloseClick(event, index) {\n    // console.log(\"filename\",index);\n    var filesToBeSent = this.state.filesToBeSent;\n    filesToBeSent.splice(index, 1); // console.log(\"files\",filesToBeSent);\n\n    var filesPreview = [];\n\n    for (var i in filesToBeSent) {\n      filesPreview.push(React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, filesToBeSent[i][0].name, React.createElement(MuiThemeProvider, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"#\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(FontIcon, {\n        className: \"material-icons customstyle\",\n        color: blue500,\n        onClick: event => this.handleCloseClick(event, i),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, \"clear\")))));\n    }\n\n    this.setState({\n      filesToBeSent,\n      filesPreview\n    });\n  }\n  /*\r\n  Function:onDrop\r\n  Parameters: acceptedFiles, rejectedFiles\r\n  Usage:This fxn is default event handler of react drop-Dropzone\r\n  which is modified to update filesPreview div\r\n  */\n\n\n  onDrop(acceptedFiles, rejectedFiles) {\n    // console.log('Accepted files: ', acceptedFiles[0].name);\n    var filesToBeSent = this.state.filesToBeSent;\n\n    if (filesToBeSent.length < this.state.printcount) {\n      filesToBeSent.push(acceptedFiles);\n      var filesPreview = [];\n\n      for (var i in filesToBeSent) {\n        filesPreview.push(React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, filesToBeSent[i][0].name, React.createElement(MuiThemeProvider, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, React.createElement(\"a\", {\n          href: \"#\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, React.createElement(FontIcon, {\n          className: \"material-icons customstyle\",\n          color: blue500,\n          styles: {\n            top: 10\n          },\n          onClick: event => this.handleCloseClick(event, i),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, \"clear\")))));\n      }\n\n      this.setState({\n        filesToBeSent,\n        filesPreview\n      });\n    } else {\n      alert(\"You have reached the limit of printing files at a time\");\n    } // console.log('Rejected files: ', rejectedFiles);\n\n  }\n  /*\r\n    Function:handleClick\r\n    Parameters: event\r\n    Usage:This fxn is handler of submit button which is responsibel fo rhandling file uploads\r\n    to backend\r\n  */\n\n\n  handleClick(event) {\n    // console.log(\"handleClick\",event);\n    this.setState({\n      printingmessage: \"Please wait until your files are being printed\",\n      printButtonDisabled: true\n    });\n    var self = this;\n\n    if (this.state.filesToBeSent.length > 0) {\n      var filesArray = this.state.filesToBeSent;\n      var req = request.post(apiBaseUrl + 'fileprint');\n\n      for (var i in filesArray) {\n        // console.log(\"files\",filesArray[i][0]);\n        req.attach(filesArray[i][0].name, filesArray[i][0]);\n      }\n\n      req.end(function (err, res) {\n        if (err) {\n          console.log(\"error ocurred\");\n        }\n\n        console.log(\"res\", res);\n        self.setState({\n          printingmessage: '',\n          printButtonDisabled: false,\n          filesToBeSent: [],\n          filesPreview: []\n        });\n        alert(\"File printing completed\"); // self.props.indexthis.switchPage();\n      });\n    } else {\n      alert(\"Please upload some files first\");\n    }\n  }\n  /*\r\n    Function:toggleDrawer\r\n    Parameters: event\r\n    Usage:This fxn is used to toggle drawer state\r\n    */\n\n\n  toggleDrawer(event) {\n    // console.log(\"drawer click\");\n    this.setState({\n      draweropen: !this.state.draweropen\n    });\n  }\n  /*\r\n    Function:toggleDrawer\r\n    Parameters: event\r\n    Usage:This fxn is used to close the drawer when user clicks anywhere on the\r\n    main div\r\n    */\n\n\n  handleDivClick(event) {\n    // console.log(\"event\",event);\n    if (this.state.draweropen) {\n      this.setState({\n        draweropen: false\n      });\n    }\n  }\n  /*\r\n    Function:handleLogout\r\n    Parameters: event\r\n    Usage:This fxn is used to end user session and redirect the user back to login page\r\n    */\n\n\n  handleLogout(event) {\n    // console.log(\"logout event fired\",this.props);\n    var loginPage = [];\n    loginPage.push(React.createElement(LoginScreen, {\n      appContext: this.props.appContext,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }));\n    this.props.appContext.setState({\n      loginPage: loginPage,\n      uploadScreen: []\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"App\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      onClick: event => this.handleDivClick(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, React.createElement(\"center\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, \"You can print upto \", this.state.printcount, \" files at a time since you are \", this.state.role), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193\n      },\n      __self: this\n    }, \"Files to be printed are:\", this.state.filesPreview)), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, this.state.printingmessage), React.createElement(MuiThemeProvider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }, React.createElement(RaisedButton, {\n      disabled: this.state.printButtonDisabled,\n      label: \"Print Files\",\n      primary: true,\n      style: style,\n      onClick: event => this.handleClick(event),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 202\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst style = {\n  margin: 15\n};\nexport default UploadScreen;","map":{"version":3,"sources":["D:/Github/Diplomarbeit/errorkb-frontend/src/components/UploadScreen.jsx"],"names":["React","Component","LoginScreen","MuiThemeProvider","AppBar","RaisedButton","Drawer","MenuItem","FontIcon","blue500","red500","greenA200","apiBaseUrl","request","require","UploadScreen","constructor","props","state","role","filesPreview","filesToBeSent","draweropen","printcount","printingmessage","printButtonDisabled","componentWillMount","setState","handleCloseClick","event","index","splice","i","push","name","onDrop","acceptedFiles","rejectedFiles","length","top","alert","handleClick","self","filesArray","req","post","attach","end","err","res","console","log","toggleDrawer","handleDivClick","handleLogout","loginPage","appContext","uploadScreen","render","style","margin"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport '../App.css';\r\n/*\r\nScreen:LoginScreen\r\nLoginscreen is the main screen which the user is shown on first visit to page and after\r\nhitting logout\r\n*/\r\nimport LoginScreen from './auth/loginscreen';\r\n/*\r\nModule:Material-UI\r\nMaterial-UI is used for designing ui of the app\r\n*/\r\nimport MuiThemeProvider from 'material-ui/styles/MuiThemeProvider';\r\nimport AppBar from 'material-ui/AppBar';\r\nimport RaisedButton from 'material-ui/RaisedButton';\r\nimport Drawer from 'material-ui/Drawer';\r\nimport MenuItem from 'material-ui/MenuItem';\r\nimport FontIcon from 'material-ui/FontIcon';\r\nimport {blue500, red500, greenA200} from 'material-ui/styles/colors';\r\n\r\nvar apiBaseUrl = \"http://localhost:4000/api/\";\r\n/*\r\nModule:Dropzone\r\nDropzone is used for local file selection\r\n*/\r\n\r\n/*\r\nModule:superagent\r\nsuperagent is used to handle post/get requests to server\r\n*/\r\nvar request = require('superagent');\r\n\r\nclass UploadScreen extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            role:'student',\r\n            filesPreview:[],\r\n            filesToBeSent:[],\r\n            draweropen:false,\r\n            printcount:10,\r\n            printingmessage:'',\r\n            printButtonDisabled:false\r\n        }\r\n    }\r\n    componentWillMount(){\r\n        // console.log(\"prop values\",this.props.role);\r\n        var printcount;\r\n        //set upload limit based on user role\r\n        if(this.props.role){\r\n            if(this.props.role == 'student'){\r\n                printcount = 5;\r\n            }\r\n            else if(this.props.role == 'teacher'){\r\n                printcount =10;\r\n            }\r\n        }\r\n        this.setState({printcount,role:this.props.role});\r\n    }\r\n    /*\r\n    Function:handleCloseClick\r\n    Parameters: event,index\r\n    Usage:This fxn is used to remove file from filesPreview div\r\n    if user clicks close icon adjacent to selected file\r\n    */\r\n    handleCloseClick(event,index){\r\n        // console.log(\"filename\",index);\r\n        var filesToBeSent=this.state.filesToBeSent;\r\n        filesToBeSent.splice(index,1);\r\n        // console.log(\"files\",filesToBeSent);\r\n        var filesPreview=[];\r\n        for(var i in filesToBeSent){\r\n            filesPreview.push(<div>\r\n                    {filesToBeSent[i][0].name}\r\n                    <MuiThemeProvider>\r\n                        <a href=\"#\"><FontIcon\r\n                            className=\"material-icons customstyle\"\r\n                            color={blue500}\r\n                            onClick={(event) => this.handleCloseClick(event,i)}\r\n                        >clear</FontIcon></a>\r\n                    </MuiThemeProvider>\r\n                </div>\r\n            )\r\n        }\r\n        this.setState({filesToBeSent,filesPreview});\r\n    }\r\n    /*\r\n    Function:onDrop\r\n    Parameters: acceptedFiles, rejectedFiles\r\n    Usage:This fxn is default event handler of react drop-Dropzone\r\n    which is modified to update filesPreview div\r\n    */\r\n    onDrop(acceptedFiles, rejectedFiles) {\r\n        // console.log('Accepted files: ', acceptedFiles[0].name);\r\n        var filesToBeSent=this.state.filesToBeSent;\r\n        if(filesToBeSent.length < this.state.printcount){\r\n            filesToBeSent.push(acceptedFiles);\r\n            var filesPreview=[];\r\n            for(var i in filesToBeSent){\r\n                filesPreview.push(<div>\r\n                        {filesToBeSent[i][0].name}\r\n                        <MuiThemeProvider>\r\n                            <a href=\"#\"><FontIcon\r\n                                className=\"material-icons customstyle\"\r\n                                color={blue500}\r\n                                styles={{ top:10,}}\r\n                                onClick={(event) => this.handleCloseClick(event,i)}\r\n                            >clear</FontIcon></a>\r\n                        </MuiThemeProvider>\r\n                    </div>\r\n                )\r\n            }\r\n            this.setState({filesToBeSent,filesPreview});\r\n        }\r\n        else{\r\n            alert(\"You have reached the limit of printing files at a time\")\r\n        }\r\n\r\n        // console.log('Rejected files: ', rejectedFiles);\r\n    }\r\n    /*\r\n      Function:handleClick\r\n      Parameters: event\r\n      Usage:This fxn is handler of submit button which is responsibel fo rhandling file uploads\r\n      to backend\r\n    */\r\n    handleClick(event){\r\n        // console.log(\"handleClick\",event);\r\n        this.setState({printingmessage:\"Please wait until your files are being printed\",printButtonDisabled:true})\r\n        var self = this;\r\n        if(this.state.filesToBeSent.length>0){\r\n            var filesArray = this.state.filesToBeSent;\r\n            var req = request.post(apiBaseUrl+'fileprint');\r\n            for(var i in filesArray){\r\n                // console.log(\"files\",filesArray[i][0]);\r\n                req.attach(filesArray[i][0].name,filesArray[i][0])\r\n            }\r\n            req.end(function(err,res){\r\n                if(err){\r\n                    console.log(\"error ocurred\");\r\n                }\r\n                console.log(\"res\",res);\r\n                self.setState({printingmessage:'',printButtonDisabled:false,filesToBeSent:[],filesPreview:[]});\r\n                alert(\"File printing completed\")\r\n                // self.props.indexthis.switchPage();\r\n            });\r\n        }\r\n        else{\r\n            alert(\"Please upload some files first\");\r\n        }\r\n    }\r\n    /*\r\n      Function:toggleDrawer\r\n      Parameters: event\r\n      Usage:This fxn is used to toggle drawer state\r\n      */\r\n    toggleDrawer(event){\r\n        // console.log(\"drawer click\");\r\n        this.setState({draweropen: !this.state.draweropen})\r\n    }\r\n    /*\r\n      Function:toggleDrawer\r\n      Parameters: event\r\n      Usage:This fxn is used to close the drawer when user clicks anywhere on the\r\n      main div\r\n      */\r\n    handleDivClick(event){\r\n        // console.log(\"event\",event);\r\n        if(this.state.draweropen){\r\n            this.setState({draweropen:false})\r\n        }\r\n    }\r\n    /*\r\n      Function:handleLogout\r\n      Parameters: event\r\n      Usage:This fxn is used to end user session and redirect the user back to login page\r\n      */\r\n    handleLogout(event){\r\n        // console.log(\"logout event fired\",this.props);\r\n        var loginPage =[];\r\n        loginPage.push(<LoginScreen appContext={this.props.appContext}/>);\r\n        this.props.appContext.setState({loginPage:loginPage,uploadScreen:[]})\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"App\">\r\n                <div onClick={(event) => this.handleDivClick(event)}>\r\n                    <center>\r\n                        <div>\r\n                            You can print upto {this.state.printcount} files at a time since you are {this.state.role}\r\n                        </div>\r\n\r\n                        <div>\r\n                            Files to be printed are:\r\n                            {this.state.filesPreview}\r\n                        </div>\r\n                    </center>\r\n                    <div>\r\n                        {this.state.printingmessage}\r\n                    </div>\r\n                    <MuiThemeProvider>\r\n                        <RaisedButton disabled={this.state.printButtonDisabled} label=\"Print Files\" primary={true} style={style} onClick={(event) => this.handleClick(event)}/>\r\n                    </MuiThemeProvider>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst style = {\r\n    margin: 15,\r\n};\r\n\r\nexport default UploadScreen;"]},"metadata":{},"sourceType":"module"}