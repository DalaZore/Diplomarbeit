{"ast":null,"code":"import _objectSpread from \"D:\\\\Github\\\\Diplomarbeit\\\\errorkb-frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"D:\\\\Github\\\\Diplomarbeit\\\\errorkb-frontend\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Github\\\\Diplomarbeit\\\\errorkb-frontend\\\\src\\\\components\\\\Dashboard.jsx\";\nimport React, { Component, useEffect } from 'react';\nimport '../App.css';\nimport { useCookies } from \"react-cookie\";\nimport { forwardRef } from 'react';\nimport MaterialTable from 'material-table';\nimport AddBox from '@material-ui/icons/AddBox';\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\nimport Check from '@material-ui/icons/Check';\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\nimport ChevronRight from '@material-ui/icons/ChevronRight';\nimport Clear from '@material-ui/icons/Clear';\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\nimport Edit from '@material-ui/icons/Edit';\nimport FilterList from '@material-ui/icons/FilterList';\nimport FirstPage from '@material-ui/icons/FirstPage';\nimport LastPage from '@material-ui/icons/LastPage';\nimport Remove from '@material-ui/icons/Remove';\nimport SaveAlt from '@material-ui/icons/SaveAlt';\nimport Search from '@material-ui/icons/Search';\nimport ViewColumn from '@material-ui/icons/ViewColumn';\nimport { makeStyles } from \"@material-ui/core/styles\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: 250\n    }\n  }\n}));\nconst tableIcons = {\n  Add: forwardRef((props, ref) => React.createElement(AddBox, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }))),\n  Check: forwardRef((props, ref) => React.createElement(Check, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }))),\n  Clear: forwardRef((props, ref) => React.createElement(Clear, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }))),\n  Delete: forwardRef((props, ref) => React.createElement(DeleteOutline, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }))),\n  DetailPanel: forwardRef((props, ref) => React.createElement(ChevronRight, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }))),\n  Edit: forwardRef((props, ref) => React.createElement(Edit, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }))),\n  Export: forwardRef((props, ref) => React.createElement(SaveAlt, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }))),\n  Filter: forwardRef((props, ref) => React.createElement(FilterList, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }))),\n  FirstPage: forwardRef((props, ref) => React.createElement(FirstPage, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }))),\n  LastPage: forwardRef((props, ref) => React.createElement(LastPage, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }))),\n  NextPage: forwardRef((props, ref) => React.createElement(ChevronRight, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }))),\n  PreviousPage: forwardRef((props, ref) => React.createElement(ChevronLeft, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }))),\n  ResetSearch: forwardRef((props, ref) => React.createElement(Clear, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }))),\n  Search: forwardRef((props, ref) => React.createElement(Search, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }))),\n  SortArrow: forwardRef((props, ref) => React.createElement(ArrowDownward, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }))),\n  ThirdStateCheck: forwardRef((props, ref) => React.createElement(Remove, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }))),\n  ViewColumn: forwardRef((props, ref) => React.createElement(ViewColumn, Object.assign({}, props, {\n    ref: ref,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })))\n};\n\nvar request = require('superagent');\n\nexport default function Dashboard() {\n  const _useCookies = useCookies(['rights']),\n        _useCookies2 = _slicedToArray(_useCookies, 3),\n        cookies = _useCookies2[0],\n        setCookie = _useCookies2[1],\n        removeCookie = _useCookies2[2];\n\n  const _React$useState = React.useState({\n    columns: [{\n      title: 'ID',\n      field: 'id',\n      editable: 'never'\n    }, {\n      title: 'Status',\n      field: 'status',\n      lookup: {\n        open: 'open',\n        closed: 'closed'\n      }\n    }, {\n      title: 'Category',\n      field: 'category',\n      lookup: {\n        open: 'product',\n        closed: 'process'\n      }\n    }, {\n      title: 'Category Description',\n      field: 'catdesc'\n    }, {\n      title: 'Title',\n      field: 'title'\n    }, {\n      title: 'Description',\n      field: 'desc'\n    }, {\n      title: 'Assigned user',\n      field: 'user'\n    }, {\n      title: 'Creation date',\n      field: 'date',\n      editable: \"never\",\n      type: 'datetime'\n    }, {\n      title: 'Solution',\n      field: 'solution'\n    }],\n    data: []\n  }),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        state = _React$useState2[0],\n        setState = _React$useState2[1];\n\n  const getEntries = async () => {\n    const url = \"http://localhost/errorkb/api/GetAllEntries\";\n    const response = await fetch(url);\n    const entrydata = await response.json();\n\n    for (let i = 0; i < entrydata.length; i++) {\n      new Promise(resolve => {\n        {\n          resolve();\n          setState(prevState => {\n            const data = [...prevState.data];\n            data.push({\n              id: entrydata[i].id,\n              status: entrydata[i].status,\n              category: entrydata[i].category,\n              catdesc: entrydata[i].catdesc,\n              title: entrydata[i].title,\n              desc: entrydata[i].description.slice(0, 50),\n              user: entrydata[i].user,\n              date: entrydata[i].timestamp,\n              solution: entrydata[i].solution\n            });\n            return _objectSpread({}, prevState, {\n              data\n            });\n          });\n        }\n      });\n    }\n  };\n\n  useEffect(() => {\n    getEntries();\n  }, []);\n  return React.createElement(MaterialTable, {\n    title: \"Entries\",\n    columns: state.columns,\n    data: state.data,\n    icons: tableIcons,\n    editable: {\n      onRowAdd: newData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(async prevState => {\n            const data = [...prevState.data];\n\n            try {\n              if (newData.status != \"open\" && newData.status != \"closed\") {\n                newData.status = \"open\";\n              }\n\n              if (newData.status == \"open\" && newData.solution != null) {\n                newData.solution = null;\n                alert(\"Warning: You can only provide a solution to a closed entry. The solution gets deleted. The entry is added.\");\n              }\n\n              if (newData.timestamp != null) {\n                alert(\"Timestamp not valid\");\n                return _objectSpread({}, prevState, {\n                  data\n                });\n              }\n\n              if (newData.user == null) {\n                alert(\"Assign this entry to an user!\");\n                return _objectSpread({}, prevState, {\n                  data\n                });\n              }\n\n              if (newData.status == \"closed\" && newData.solution == null) {\n                alert(\"Error: You wanted to close this entry but did not provide any solution\");\n                return _objectSpread({}, prevState, {\n                  data\n                });\n              }\n\n              if (newData.title == null || newData.desc == null) {\n                alert(\"Please give this entry a title and a description\");\n                return _objectSpread({}, prevState, {\n                  data\n                });\n              }\n\n              if (newData.id != null) {\n                alert(\"Error: Invalid ID\");\n                return _objectSpread({}, prevState, {\n                  data\n                });\n              }\n\n              if (newData.category != \"product\" && newData.category != \"process\") {\n                alert(\"Please assign this entry a category\");\n                return _objectSpread({}, prevState, {\n                  data\n                });\n              }\n\n              if (newData.catdesc == null) {\n                alert(\"Please enter a Category Description (e.g. Office 2016)\");\n                return _objectSpread({}, prevState, {\n                  data\n                });\n              }\n\n              const url = \"http://localhost/errorkb/api/PostNewEntry/?tit=\" + newData.title + \"&desc=\" + newData.desc + \"&stat=\" + newData.status + \"&username=\" + newData.user + \"&solution=\" + newData.solution + \"&category=\" + newData.category + \"&catdesc=\" + newData.catdesc;\n              const response = await request('POST', url);\n\n              if (response.statusCode == 200) {\n                data.push(newData);\n                return _objectSpread({}, prevState, {\n                  data\n                });\n              }\n            } catch (error) {\n              alert(error.message);\n              return _objectSpread({}, prevState, {\n                data\n              });\n            } finally {\n              window.location.reload();\n            }\n          });\n        }, 600);\n      }),\n      onRowUpdate: (newData, oldData) => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n\n          if (oldData) {\n            console.log(oldData.username);\n            console.log(newData);\n            setState(async prevState => {\n              const data = [...prevState.data];\n\n              try {\n                if (newData.status != \"open\" && newData.status != \"closed\") {\n                  newData.status = \"open\";\n                }\n\n                if (newData.status == \"open\" && newData.solution != null) {\n                  newData.solution = null;\n                  alert(\"Warning: You can only provide a solution to a closed entry. The solution gets deleted. The entry is added.\");\n                }\n\n                if (newData.timestamp != null) {\n                  alert(\"Timestamp not valid\");\n                  return _objectSpread({}, prevState, {\n                    data\n                  });\n                }\n\n                if (newData.user == null) {\n                  alert(\"Assign this entry to an user!\");\n                  return _objectSpread({}, prevState, {\n                    data\n                  });\n                }\n\n                if (newData.status == \"closed\" && newData.solution == null) {\n                  alert(\"Error: You wanted to close this entry but did not provide any solution\");\n                  return _objectSpread({}, prevState, {\n                    data\n                  });\n                }\n\n                if (newData.title == null || newData.desc == null) {\n                  alert(\"Please give this entry a title and a description\");\n                  return _objectSpread({}, prevState, {\n                    data\n                  });\n                }\n\n                if (newData.id != oldData.id) {\n                  alert(\"Error: Invalid ID\");\n                  return _objectSpread({}, prevState, {\n                    data\n                  });\n                }\n\n                if (newData.category != \"product\" || newData.category != \"process\") {\n                  alert(\"Please assign this entry a category\");\n                  return _objectSpread({}, prevState, {\n                    data\n                  });\n                }\n\n                if (newData.catdesc == null) {\n                  alert(\"Please enter a Category Description (e.g. Office 2016)\");\n                  return _objectSpread({}, prevState, {\n                    data\n                  });\n                }\n\n                const url = \"http://localhost/errorkb/api/PutNewEntry/?id=\" + oldData.id + \"&tit=\" + newData.title + \"&desc=\" + newData.desc + \"&stat=\" + newData.status + \"&username=\" + newData.user + \"&solution=\" + newData.solution + \"&category=\" + newData.category + \"&catdesc=\" + newData.catdesc;\n                const response = await request('PUT', url);\n\n                if (response.statusCode == 200) {\n                  data[data.indexOf(oldData)] = newData;\n                  return _objectSpread({}, prevState, {\n                    data\n                  });\n                }\n              } catch (error) {\n                alert(error.message);\n                return _objectSpread({}, prevState, {\n                  data\n                });\n              } finally {\n                window.location.reload();\n              }\n            });\n          }\n        }, 600);\n      }),\n      onRowDelete: oldData => new Promise(resolve => {\n        setTimeout(() => {\n          resolve();\n          setState(async prevState => {\n            const data = [...prevState.data];\n            const url = \"http://localhost/errorkb/Api/DeleteEntry?id=\" + oldData.id;\n\n            try {\n              if (cookies.rights == \"admin\") {\n                const response = await request('DELETE', url);\n\n                if (response.statusCode == 200) {\n                  data.splice(data.indexOf(oldData), 1);\n                  return _objectSpread({}, prevState, {\n                    data\n                  });\n                }\n              } else {\n                alert(\"Insufficient permissions\");\n                return _objectSpread({}, prevState, {\n                  data\n                });\n              }\n            } catch (error) {\n              alert(error.message);\n              return _objectSpread({}, prevState, {\n                data\n              });\n            } finally {\n              window.location.reload();\n            }\n          });\n        }, 600);\n      })\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  });\n}\nconst style = {\n  margin: 15\n};","map":{"version":3,"sources":["D:/Github/Diplomarbeit/errorkb-frontend/src/components/Dashboard.jsx"],"names":["React","Component","useEffect","useCookies","forwardRef","MaterialTable","AddBox","ArrowDownward","Check","ChevronLeft","ChevronRight","Clear","DeleteOutline","Edit","FilterList","FirstPage","LastPage","Remove","SaveAlt","Search","ViewColumn","makeStyles","useStyles","theme","root","margin","spacing","width","tableIcons","Add","props","ref","Delete","DetailPanel","Export","Filter","NextPage","PreviousPage","ResetSearch","SortArrow","ThirdStateCheck","request","require","Dashboard","cookies","setCookie","removeCookie","useState","columns","title","field","editable","lookup","open","closed","type","data","state","setState","getEntries","url","response","fetch","entrydata","json","i","length","Promise","resolve","prevState","push","id","status","category","catdesc","desc","description","slice","user","date","timestamp","solution","onRowAdd","newData","setTimeout","alert","statusCode","error","message","window","location","reload","onRowUpdate","oldData","console","log","username","indexOf","onRowDelete","rights","splice","style"],"mappings":"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","sourcesContent":["import React, {Component, useEffect} from 'react';\r\nimport '../App.css';\r\nimport {useCookies} from \"react-cookie\";\r\nimport { forwardRef } from 'react';\r\nimport MaterialTable from 'material-table';\r\nimport AddBox from '@material-ui/icons/AddBox';\r\nimport ArrowDownward from '@material-ui/icons/ArrowDownward';\r\nimport Check from '@material-ui/icons/Check';\r\nimport ChevronLeft from '@material-ui/icons/ChevronLeft';\r\nimport ChevronRight from '@material-ui/icons/ChevronRight';\r\nimport Clear from '@material-ui/icons/Clear';\r\nimport DeleteOutline from '@material-ui/icons/DeleteOutline';\r\nimport Edit from '@material-ui/icons/Edit';\r\nimport FilterList from '@material-ui/icons/FilterList';\r\nimport FirstPage from '@material-ui/icons/FirstPage';\r\nimport LastPage from '@material-ui/icons/LastPage';\r\nimport Remove from '@material-ui/icons/Remove';\r\nimport SaveAlt from '@material-ui/icons/SaveAlt';\r\nimport Search from '@material-ui/icons/Search';\r\nimport ViewColumn from '@material-ui/icons/ViewColumn';\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(1),\r\n            width: 250,\r\n        },\r\n    },\r\n}));\r\n\r\nconst tableIcons = {\r\n    Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n    Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n    Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n    DetailPanel: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n    Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n    Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n    FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n    LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n    NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n    PreviousPage: forwardRef((props, ref) => <ChevronLeft {...props} ref={ref} />),\r\n    ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n    Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n    SortArrow: forwardRef((props, ref) => <ArrowDownward {...props} ref={ref} />),\r\n    ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n    ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n\r\nvar request = require('superagent');\r\n\r\n\r\n\r\nexport default function Dashboard() {\r\n\r\n    const [cookies, setCookie, removeCookie] = useCookies(['rights']);\r\n    const [state, setState] = React.useState({\r\n        columns: [\r\n            { title: 'ID', field: 'id' ,editable:'never'},\r\n            { title: 'Status', field: 'status',lookup:{open:'open',closed:'closed'} },\r\n            { title: 'Category', field: 'category',lookup:{open:'product',closed:'process'} },\r\n            { title: 'Category Description', field: 'catdesc' },\r\n            { title: 'Title', field: 'title' },\r\n            { title: 'Description', field: 'desc' },\r\n            { title: 'Assigned user', field: 'user' },\r\n            { title: 'Creation date', field: 'date',editable:\"never\" ,type:'datetime'},\r\n            { title: 'Solution', field: 'solution' },\r\n        ],\r\n        data: [\r\n\r\n        ],\r\n    });\r\n\r\n    const getEntries = async() => {\r\n\r\n        const url = \"http://localhost/errorkb/api/GetAllEntries\";\r\n        const response = await fetch(url);\r\n        const entrydata = await response.json();\r\n        for(let i = 0 ; i < entrydata.length; i++){\r\n            new Promise(resolve => {\r\n                {resolve();\r\n                    setState(prevState => {\r\n                        const data = [...prevState.data];\r\n                        data.push({id:entrydata[i].id,status:entrydata[i].status,category:entrydata[i].category,catdesc:entrydata[i].catdesc,title:entrydata[i].title,desc:entrydata[i].description.slice(0,50),user:entrydata[i].user,date:entrydata[i].timestamp,solution:entrydata[i].solution});\r\n                        return { ...prevState, data };\r\n                    });\r\n                }\r\n            })\r\n        }\r\n    }\r\n    useEffect(()=>{\r\n        getEntries();\r\n    },[]);\r\n\r\n        return(\r\n            <MaterialTable\r\n                title=\"Entries\"\r\n                columns={state.columns}\r\n                data={state.data}\r\n                icons={tableIcons}\r\n                editable={{\r\n                    onRowAdd: newData =>\r\n                        new Promise(resolve => {\r\n                            setTimeout(() => {\r\n                                resolve();\r\n                                setState(async prevState => {\r\n\r\n                                    const data = [...prevState.data];\r\n                                    try{\r\n                                    if(newData.status != \"open\" && newData.status != \"closed\") {\r\n                                        newData.status = \"open\"\r\n                                    }\r\n                                    if(newData.status == \"open\" && newData.solution!= null){\r\n                                        newData.solution = null;\r\n                                        alert(\"Warning: You can only provide a solution to a closed entry. The solution gets deleted. The entry is added.\");\r\n                                    }\r\n                                    if(newData.timestamp != null){\r\n                                        alert(\"Timestamp not valid\");\r\n                                        return { ...prevState, data };\r\n                                    }\r\n                                    if(newData.user == null){\r\n                                        alert(\"Assign this entry to an user!\");\r\n                                        return { ...prevState, data };\r\n                                    }\r\n                                    if(newData.status == \"closed\" && newData.solution == null){\r\n                                        alert(\"Error: You wanted to close this entry but did not provide any solution\");\r\n                                        return { ...prevState, data };\r\n                                    }\r\n                                    if(newData.title == null || newData.desc == null){\r\n                                        alert(\"Please give this entry a title and a description\");\r\n                                        return { ...prevState, data };\r\n                                    }\r\n                                    if(newData.id != null){\r\n                                        alert(\"Error: Invalid ID\");\r\n                                        return { ...prevState, data };\r\n                                    }\r\n                                    if(newData.category != \"product\" && newData.category != \"process\"){\r\n                                        alert(\"Please assign this entry a category\");\r\n                                        return { ...prevState, data };\r\n                                    }\r\n                                    if(newData.catdesc == null){\r\n                                            alert(\"Please enter a Category Description (e.g. Office 2016)\");\r\n                                            return { ...prevState, data };\r\n                                    }\r\n                                    const url = \"http://localhost/errorkb/api/PostNewEntry/?tit=\"+newData.title+\"&desc=\"+newData.desc+\"&stat=\"+newData.status+\"&username=\"+newData.user+\"&solution=\"+newData.solution+\"&category=\"+newData.category+\"&catdesc=\"+newData.catdesc;\r\n\r\n                                        const response = await request('POST',url);\r\n                                        if(response.statusCode==200){\r\n                                            data.push(newData);\r\n                                            return { ...prevState, data };\r\n                                        }\r\n                                    }\r\n                                    catch(error){\r\n                                        alert(error.message)\r\n                                        return { ...prevState, data };\r\n                                    }\r\n                                    finally{\r\n                                        window.location.reload();\r\n                                    }\r\n                                })\r\n                            }, 600);\r\n                        }),\r\n                    onRowUpdate:\r\n                        (newData, oldData) =>\r\n                            new Promise(resolve => {\r\n                                setTimeout(() => {\r\n                                    resolve();\r\n                                    if (oldData) {\r\n                                        console.log(oldData.username);\r\n                                        console.log(newData);\r\n                                        setState(async prevState => {\r\n                                            const data = [...prevState.data];\r\n                                            try{\r\n\r\n                                                if(newData.status != \"open\" && newData.status != \"closed\") {\r\n                                                    newData.status = \"open\"\r\n                                                }\r\n                                                if(newData.status == \"open\" && newData.solution!= null){\r\n                                                    newData.solution = null;\r\n                                                    alert(\"Warning: You can only provide a solution to a closed entry. The solution gets deleted. The entry is added.\");\r\n                                                }\r\n                                                if(newData.timestamp != null){\r\n                                                    alert(\"Timestamp not valid\");\r\n                                                    return { ...prevState, data };\r\n                                                }\r\n                                                if(newData.user == null){\r\n                                                    alert(\"Assign this entry to an user!\");\r\n                                                    return { ...prevState, data };\r\n                                                }\r\n                                                if(newData.status == \"closed\" && newData.solution == null){\r\n                                                    alert(\"Error: You wanted to close this entry but did not provide any solution\");\r\n                                                    return { ...prevState, data };\r\n                                                }\r\n                                                if(newData.title == null || newData.desc == null){\r\n                                                    alert(\"Please give this entry a title and a description\");\r\n                                                    return { ...prevState, data };\r\n                                                }\r\n                                                if(newData.id != oldData.id){\r\n                                                    alert(\"Error: Invalid ID\");\r\n                                                    return { ...prevState, data };\r\n                                                }\r\n                                                if(newData.category != \"product\" || newData.category != \"process\"){\r\n                                                    alert(\"Please assign this entry a category\");\r\n                                                    return { ...prevState, data };\r\n                                                }\r\n                                                if(newData.catdesc == null){\r\n                                                    alert(\"Please enter a Category Description (e.g. Office 2016)\");\r\n                                                    return { ...prevState, data };\r\n                                                }\r\n                                            const url = \"http://localhost/errorkb/api/PutNewEntry/?id=\"+ oldData.id+\"&tit=\"+newData.title+\"&desc=\"+newData.desc+\"&stat=\"+newData.status+\"&username=\"+newData.user+\"&solution=\"+newData.solution+\"&category=\"+newData.category+\"&catdesc=\"+newData.catdesc;\r\n\r\n                                                const response = await request('PUT',url);\r\n                                                if(response.statusCode==200){\r\n                                                    data[data.indexOf(oldData)] = newData;\r\n                                                    return { ...prevState, data };\r\n                                                }\r\n                                            }\r\n                                            catch(error){\r\n                                                alert(error.message)\r\n                                                return { ...prevState, data };\r\n                                            }\r\n                                            finally{\r\n                                                window.location.reload();\r\n                                            }\r\n                                        })\r\n                                    }\r\n                                }, 600);\r\n                            }),\r\n                    onRowDelete: oldData =>\r\n                        new Promise(resolve => {\r\n                            setTimeout(() => {\r\n                                resolve();\r\n                                setState(async prevState => {\r\n                                    const data = [...prevState.data];\r\n                                    const url = \"http://localhost/errorkb/Api/DeleteEntry?id=\"+oldData.id;\r\n                                    try{\r\n                                        if(cookies.rights == \"admin\"){\r\n                                            const response = await request('DELETE',url);\r\n                                            if(response.statusCode==200){\r\n                                                data.splice(data.indexOf(oldData), 1);\r\n                                                return { ...prevState, data };\r\n                                            }\r\n                                        }\r\n                                        else{\r\n                                            alert(\"Insufficient permissions\");\r\n                                            return { ...prevState, data };\r\n                                        }\r\n\r\n                                    }\r\n                                    catch(error){\r\n                                        alert(error.message)\r\n                                        return { ...prevState, data };\r\n                                    }\r\n                                    finally{\r\n                                        window.location.reload();\r\n                                    }\r\n                                });\r\n                            }, 600);\r\n                        }),\r\n                }}\r\n            />\r\n\r\n\r\n\r\n        );\r\n\r\n}\r\n\r\n\r\nconst style = {\r\n    margin: 15,\r\n};\r\n"]},"metadata":{},"sourceType":"module"}